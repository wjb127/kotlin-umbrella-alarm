package com.applicforge.umbalarm.presentation.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.applicforge.umbalarm.domain.model.AppConfig
import com.applicforge.umbalarm.domain.model.Menu
import com.applicforge.umbalarm.domain.model.Toolbar
import com.applicforge.umbalarm.domain.model.Style
import com.applicforge.umbalarm.domain.model.FcmTopic
import com.applicforge.umbalarm.domain.model.Button
import com.applicforge.umbalarm.domain.usecase.GetConfigUseCase
import com.applicforge.umbalarm.data.repository.ConfigRepository
import com.applicforge.umbalarm.data.api.AppInfoDto
import com.applicforge.umbalarm.data.api.ConfigResponseDto
import com.applicforge.umbalarm.utils.FcmManager
import com.applicforge.umbalarm.config.AppConfig as AppConfigTemplate
import com.applicforge.umbalarm.domain.model.WeatherInfo
import com.applicforge.umbalarm.data.repository.WeatherRepository
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class MainViewModel @Inject constructor(
    private val getConfigUseCase: GetConfigUseCase,
    private val configRepository: ConfigRepository,
    private val weatherRepository: WeatherRepository,
    private val fcmManager: FcmManager
) : ViewModel() {
    
    // ‚ö° ÌÖúÌîåÎ¶ø ÏÑ§Ï†ï: AppConfigÏóêÏÑú Ïï± ID Í∞ÄÏ†∏Ïò§Í∏∞
    private val APP_ID = AppConfigTemplate.APP_ID
    private val PACKAGE_NAME = AppConfigTemplate.PACKAGE_NAME
    
    private val _uiState = MutableStateFlow(UiState())
    val uiState: StateFlow<UiState> = _uiState.asStateFlow()
    
    init {
        loadAllData()
        initializeFcm()
    }
    
    fun loadAllData() {
        _uiState.value = _uiState.value.copy(isLoading = true, error = null)
        
        // üÜï ÏÉàÎ°úÏö¥ ÌÜµÌï© API Ïö∞ÏÑ† ÏãúÎèÑ
        loadConfigByPackage()
        
        // Í∏∞Ï°¥ Í∞úÎ≥Ñ APIÎì§ (Î∞±ÏóÖÏö©)
        loadConfig()
        loadConfigResponse()
        loadAppInfo()
        loadMenus()
        loadToolbars()
        loadFcmTopics()
        loadStyles()
        loadButtons()
        
        // ‚òÇÔ∏è ÎÇ†Ïî® Ï†ïÎ≥¥ Î°úÎìú
        loadWeatherData()
    }
    
    // üÜï ÏÉàÎ°úÏö¥ ÌÜµÌï© API - Ìå®ÌÇ§ÏßÄÎ™Ö Í∏∞Î∞ò
    private fun loadConfigByPackage() {
        viewModelScope.launch {
            android.util.Log.d("MainViewModel", "üöÄ ÌÜµÌï© API Î°úÎî© ÏãúÏûë...")
            configRepository.getAppConfigByPackage(PACKAGE_NAME).collect { result ->
                result.fold(
                    onSuccess = { config ->
                        android.util.Log.d("MainViewModel", "‚úÖ ÌÜµÌï© API Î°úÎìú ÏÑ±Í≥µ!")
                        android.util.Log.d("MainViewModel", "  üì± Î©îÎâ¥: ${config.menus.size}Í∞ú")
                        android.util.Log.d("MainViewModel", "  üîß Ìà¥Î∞î: ${config.toolbars.size}Í∞ú")
                        
                        _uiState.value = _uiState.value.copy(
                            config = config,
                            menus = config.menus,
                            toolbars = config.toolbars,
                            fcmTopics = config.fcmTopics,
                            styles = config.styles,
                            buttons = config.buttons,
                            apiResults = _uiState.value.apiResults.copy(
                                configResult = "üÜï ÌÜµÌï© API ÏÑ±Í≥µ: Î©îÎâ¥ ${config.menus.size}Í∞ú, Ìà¥Î∞î ${config.toolbars.size}Í∞ú"
                            )
                        )
                        
                        // FCM ÌÜ†ÌîΩ Íµ¨ÎèÖ
                        fcmManager.subscribeToTopics(config.fcmTopics)
                        checkAllLoaded()
                    },
                    onFailure = { error ->
                        android.util.Log.e("MainViewModel", "‚ùå ÌÜµÌï© API Î°úÎìú Ïã§Ìå®: ${error.message}")
                        _uiState.value = _uiState.value.copy(
                            apiResults = _uiState.value.apiResults.copy(
                                configResult = "‚ùå ÌÜµÌï© API Ïã§Ìå®: ${error.message}"
                            )
                        )
                        checkAllLoaded()
                    }
                )
            }
        }
    }

    private fun loadConfig() {
        viewModelScope.launch {
            getConfigUseCase.execute(APP_ID).collect { result ->
                result.fold(
                    onSuccess = { config ->
                        _uiState.value = _uiState.value.copy(
                            config = config,
                            apiResults = _uiState.value.apiResults.copy(
                                configResult = "‚úÖ Config (UseCase) Î°úÎìú ÏÑ±Í≥µ"
                            )
                        )
                        // FCM ÌÜ†ÌîΩ Íµ¨ÎèÖ
                        fcmManager.subscribeToTopics(config.fcmTopics)
                        checkAllLoaded()
                    },
                    onFailure = { error ->
                        _uiState.value = _uiState.value.copy(
                            apiResults = _uiState.value.apiResults.copy(
                                configResult = "‚ùå Config (UseCase) Î°úÎìú Ïã§Ìå®: ${error.message}"
                            )
                        )
                        checkAllLoaded()
                    }
                )
            }
        }
    }
    
    private fun loadConfigResponse() {
        viewModelScope.launch {
            configRepository.getConfigResponse(APP_ID).collect { result ->
                result.fold(
                    onSuccess = { configResponse ->
                        _uiState.value = _uiState.value.copy(
                            configResponse = configResponse,
                            apiResults = _uiState.value.apiResults.copy(
                                configResponseResult = "‚úÖ Config (ÌÜµÌï©) Î°úÎìú ÏÑ±Í≥µ: ${configResponse.message}"
                            )
                        )
                        checkAllLoaded()
                    },
                    onFailure = { error ->
                        _uiState.value = _uiState.value.copy(
                            apiResults = _uiState.value.apiResults.copy(
                                configResponseResult = "‚ùå Config (ÌÜµÌï©) Î°úÎìú Ïã§Ìå®: ${error.message}"
                            )
                        )
                        checkAllLoaded()
                    }
                )
            }
        }
    }
    
    private fun loadAppInfo() {
        viewModelScope.launch {
            configRepository.getAppInfo(APP_ID).collect { result ->
                result.fold(
                    onSuccess = { appInfo ->
                        _uiState.value = _uiState.value.copy(
                            appInfo = appInfo,
                            apiResults = _uiState.value.apiResults.copy(
                                appInfoResult = "‚úÖ Ïï± Ï†ïÎ≥¥ Î°úÎìú ÏÑ±Í≥µ: ${appInfo.app_name}"
                            )
                        )
                        checkAllLoaded()
                    },
                    onFailure = { error ->
                        _uiState.value = _uiState.value.copy(
                            apiResults = _uiState.value.apiResults.copy(
                                appInfoResult = "‚ùå Ïï± Ï†ïÎ≥¥ Î°úÎìú Ïã§Ìå®: ${error.message}"
                            )
                        )
                        checkAllLoaded()
                    }
                )
            }
        }
    }
    
    private fun loadMenus() {
        viewModelScope.launch {
            android.util.Log.d("MainViewModel", "üöÄ Î©îÎâ¥ Î°úÎî© ÏãúÏûë...")
            configRepository.getMenus(APP_ID).collect { result ->
                result.fold(
                    onSuccess = { menus ->
                        android.util.Log.d("MainViewModel", "‚úÖ Î©îÎâ¥ Î°úÎìú ÏÑ±Í≥µ! Í∞úÏàò: ${menus.size}")
                        menus.forEachIndexed { index, menu ->
                            android.util.Log.d("MainViewModel", "  üì± Î©îÎâ¥ $index: ${menu.title}")
                        }
                        _uiState.value = _uiState.value.copy(
                            menus = menus,
                            apiResults = _uiState.value.apiResults.copy(
                                menuResult = "‚úÖ Î©îÎâ¥ ${menus.size}Í∞ú Î°úÎìú ÏÑ±Í≥µ"
                            )
                        )
                        checkAllLoaded()
                    },
                    onFailure = { error ->
                        android.util.Log.e("MainViewModel", "‚ùå Î©îÎâ¥ Î°úÎìú Ïã§Ìå®: ${error.message}")
                        _uiState.value = _uiState.value.copy(
                            apiResults = _uiState.value.apiResults.copy(
                                menuResult = "‚ùå Î©îÎâ¥ Î°úÎìú Ïã§Ìå®: ${error.message}"
                            )
                        )
                        checkAllLoaded()
                    }
                )
            }
        }
    }
    
    private fun loadToolbars() {
        viewModelScope.launch {
            android.util.Log.d("MainViewModel", "üöÄ Ìà¥Î∞î Î°úÎî© ÏãúÏûë...")
            configRepository.getToolbars(APP_ID).collect { result ->
                result.fold(
                    onSuccess = { toolbars ->
                        android.util.Log.d("MainViewModel", "‚úÖ Ìà¥Î∞î Î°úÎìú ÏÑ±Í≥µ! Í∞úÏàò: ${toolbars.size}")
                        toolbars.forEachIndexed { index, toolbar ->
                            android.util.Log.d("MainViewModel", "  üîß Ìà¥Î∞î $index: ${toolbar.title} (Î≤ÑÌäº: ${toolbar.buttons.size}Í∞ú)")
                        }
                        _uiState.value = _uiState.value.copy(
                            toolbars = toolbars,
                            apiResults = _uiState.value.apiResults.copy(
                                toolbarResult = "‚úÖ Ìà¥Î∞î ${toolbars.size}Í∞ú Î°úÎìú ÏÑ±Í≥µ"
                            )
                        )
                        checkAllLoaded()
                    },
                    onFailure = { error ->
                        android.util.Log.e("MainViewModel", "‚ùå Ìà¥Î∞î Î°úÎìú Ïã§Ìå®: ${error.message}")
                        _uiState.value = _uiState.value.copy(
                            apiResults = _uiState.value.apiResults.copy(
                                toolbarResult = "‚ùå Ìà¥Î∞î Î°úÎìú Ïã§Ìå®: ${error.message}"
                            )
                        )
                        checkAllLoaded()
                    }
                )
            }
        }
    }
    
    private fun loadFcmTopics() {
        viewModelScope.launch {
            configRepository.getFcmTopics(APP_ID).collect { result ->
                result.fold(
                    onSuccess = { fcmTopics ->
                        _uiState.value = _uiState.value.copy(
                            fcmTopics = fcmTopics,
                            apiResults = _uiState.value.apiResults.copy(
                                fcmTopicResult = "‚úÖ FCM ÌÜ†ÌîΩ ${fcmTopics.size}Í∞ú Î°úÎìú ÏÑ±Í≥µ"
                            )
                        )
                        // FCM ÌÜ†ÌîΩ Íµ¨ÎèÖ
                        fcmManager.subscribeToTopics(fcmTopics)
                        checkAllLoaded()
                    },
                    onFailure = { error ->
                        _uiState.value = _uiState.value.copy(
                            apiResults = _uiState.value.apiResults.copy(
                                fcmTopicResult = "‚ùå FCM ÌÜ†ÌîΩ Î°úÎìú Ïã§Ìå®: ${error.message}"
                            )
                        )
                        checkAllLoaded()
                    }
                )
            }
        }
    }
    
    private fun loadStyles() {
        viewModelScope.launch {
            configRepository.getStyles(APP_ID).collect { result ->
                result.fold(
                    onSuccess = { styles ->
                        _uiState.value = _uiState.value.copy(
                            styles = styles,
                            apiResults = _uiState.value.apiResults.copy(
                                styleResult = "‚úÖ Ïä§ÌÉÄÏùº ${styles.size}Í∞ú Î°úÎìú ÏÑ±Í≥µ"
                            )
                        )
                        checkAllLoaded()
                    },
                    onFailure = { error ->
                        _uiState.value = _uiState.value.copy(
                            apiResults = _uiState.value.apiResults.copy(
                                styleResult = "‚ùå Ïä§ÌÉÄÏùº Î°úÎìú Ïã§Ìå®: ${error.message}"
                            )
                        )
                        checkAllLoaded()
                    }
                )
            }
        }
    }
    
    private fun loadButtons() {
        viewModelScope.launch {
            configRepository.getButtons(APP_ID).collect { result ->
                result.fold(
                    onSuccess = { buttons ->
                        println("DEBUG: Buttons loaded successfully - count: ${buttons.size}")
                        buttons.forEach { button ->
                            println("DEBUG: Button - id: ${button.buttonId}, title: ${button.title}, visible: ${button.isVisible}, enabled: ${button.isEnabled}")
                        }
                        _uiState.value = _uiState.value.copy(
                            buttons = buttons,
                            apiResults = _uiState.value.apiResults.copy(
                                buttonResult = "‚úÖ Î≤ÑÌäº ${buttons.size}Í∞ú Î°úÎìú ÏÑ±Í≥µ"
                            )
                        )
                        checkAllLoaded()
                    },
                    onFailure = { error ->
                        println("DEBUG: Button loading failed - error: ${error.message}")
                        _uiState.value = _uiState.value.copy(
                            apiResults = _uiState.value.apiResults.copy(
                                buttonResult = "‚ùå Î≤ÑÌäº Î°úÎìú Ïã§Ìå®: ${error.message}"
                            )
                        )
                        checkAllLoaded()
                    }
                )
            }
        }
    }
    
    // ‚òÇÔ∏è ÎÇ†Ïî® Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    private fun loadWeatherData() {
        viewModelScope.launch {
            android.util.Log.d("MainViewModel", "‚òÇÔ∏è ÎÇ†Ïî® Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏãúÏûë...")
            
            // ÏÑúÏö∏ Ï¢åÌëú (ÏòàÏãú)
            val latitude = 37.5665
            val longitude = 126.9780
            val apiKey = "demo_api_key" // Demo ÌÇ§ (Ïã§Ï†úÎ°úÎäî AppConfigÏóêÏÑú Í∞ÄÏ†∏Ïò¨ ÏòàÏ†ï)
            
            try {
                val result = weatherRepository.getCurrentWeather(latitude, longitude, apiKey)
                result.fold(
                    onSuccess = { weatherInfo ->
                        android.util.Log.d("MainViewModel", "‚úÖ ÎÇ†Ïî® Î°úÎìú ÏÑ±Í≥µ: ${weatherInfo.description}")
                        
                        val rainProbability = calculateRainProbability(weatherInfo)
                        val isRainyDay = rainProbability > 60.0
                        val weatherMessage = generateWeatherMessage(isRainyDay, rainProbability)
                        
                        _uiState.value = _uiState.value.copy(
                            weatherInfo = weatherInfo,
                            rainProbability = rainProbability,
                            isRainyDay = isRainyDay,
                            weatherMessage = weatherMessage
                        )
                        
                        android.util.Log.d("MainViewModel", "‚òÇÔ∏è ÎπÑÏò¨ ÌôïÎ•†: ${rainProbability}%, Î©îÏãúÏßÄ: $weatherMessage")
                    },
                    onFailure = { error ->
                        android.util.Log.e("MainViewModel", "‚ùå ÎÇ†Ïî® Î°úÎìú Ïã§Ìå®: ${error.message}")
                        // ÎÇ†Ïî® API Ïã§Ìå® Ïãú Í∏∞Î≥∏ Î©îÏãúÏßÄ - ÏÑºÏä§ÏûàÎäî Mock Îç∞Ïù¥ÌÑ∞Î°ú ÎåÄÏ≤¥
                        val mockRainProbability = 75.0
                        val mockWeatherMessage = "Ïò§ÎäòÏùÄ ÎπÑÍ∞Ä Ïò¨ Í∞ÄÎä•ÏÑ±Ïù¥ ÎÜíÏïÑÏöî! ‚òî\nÏö∞ÏÇ∞ ÏïåÎ¶ºÏùÑ ÏÑ§Ï†ïÌï¥ÎìúÎ¶¥ÍπåÏöî?"
                        
                        _uiState.value = _uiState.value.copy(
                            rainProbability = mockRainProbability,
                            isRainyDay = true,
                            weatherMessage = mockWeatherMessage
                        )
                        
                        android.util.Log.d("MainViewModel", "üîÑ Mock ÎÇ†Ïî® Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©: $mockWeatherMessage")
                    }
                )
            } catch (e: Exception) {
                android.util.Log.e("MainViewModel", "üí• ÎÇ†Ïî® Î°úÎî© ÏòàÏô∏: ${e.message}")
                // ÏòàÏô∏ Î∞úÏÉù ÏãúÏóêÎèÑ ÏÑºÏä§ÏûàÎäî Mock Îç∞Ïù¥ÌÑ∞
                _uiState.value = _uiState.value.copy(
                    rainProbability = 65.0,
                    isRainyDay = true,
                    weatherMessage = "Ïò§ÎäòÏùÄ ÎπÑÍ∞Ä Ïò¨ Ïàò ÏûàÏñ¥Ïöî üåßÔ∏è\nÏö∞ÏÇ∞ÏùÑ ÎØ∏Î¶¨ Ï§ÄÎπÑÌï¥ÎëêÏãúÎ©¥ Ï¢ãÍ≤†Ïñ¥Ïöî!"
                )
            }
        }
    }
    
    // ÎπÑÏò¨ ÌôïÎ•† Í≥ÑÏÇ∞ (WeatherInfo Î™®Îç∏ Í∏∞Î∞ò)
    private fun calculateRainProbability(weatherInfo: WeatherInfo): Double {
        // Í∏∞Ï°¥ Í∞ïÏàò ÌôïÎ•†Ïù¥ ÏûàÏúºÎ©¥ Ïö∞ÏÑ† ÏÇ¨Ïö©
        if (weatherInfo.rainProbability > 0) {
            return weatherInfo.rainProbability.toDouble()
        }
        
        // ÎÇ†Ïî® Ïú†Ìòï Í∏∞Î∞òÏúºÎ°ú ÎπÑÏò¨ ÌôïÎ•† Í≥ÑÏÇ∞
        return when (weatherInfo.weatherType) {
            com.applicforge.umbalarm.domain.model.WeatherType.STORMY -> 85.0 // Ìè≠Ìíç
            com.applicforge.umbalarm.domain.model.WeatherType.RAINY -> 90.0 // ÎπÑ
            com.applicforge.umbalarm.domain.model.WeatherType.SNOWY -> 75.0 // Îàà (Ïö∞ÏÇ∞ ÌïÑÏöî)
            com.applicforge.umbalarm.domain.model.WeatherType.SUNNY -> 5.0 // ÎßëÏùå
            com.applicforge.umbalarm.domain.model.WeatherType.CLOUDY -> when (weatherInfo.humidity) {
                in 80..100 -> 65.0 // ÏäµÎèÑ ÎÜíÏùÄ ÌùêÎ¶º
                in 60..79 -> 35.0  // Î≥¥ÌÜµ ÌùêÎ¶º
                else -> 15.0       // ÏïΩÍ∞Ñ ÌùêÎ¶º
            }
        }
    }
    
    // ÎÇ†Ïî® Î©îÏãúÏßÄ ÏÉùÏÑ±
    private fun generateWeatherMessage(isRainyDay: Boolean, rainProbability: Double): String {
        return if (isRainyDay) {
            when {
                rainProbability > 80 -> "Ïò§ÎäòÏùÄ ÎπÑÍ∞Ä Ïò¨ Í∞ÄÎä•ÏÑ±Ïù¥ ÎÜíÏïÑÏöî! ‚òî\nÏö∞ÏÇ∞ ÏïåÎ¶ºÏùÑ ÏÑ§Ï†ïÌï¥ÎìúÎ¶¥ÍπåÏöî?"
                rainProbability > 60 -> "Ïò§ÎäòÏùÄ ÎπÑÍ∞Ä Ïò¨ Ïàò ÏûàÏñ¥Ïöî üåßÔ∏è\nÏö∞ÏÇ∞ÏùÑ ÎØ∏Î¶¨ Ï§ÄÎπÑÌï¥ÎëêÏãúÎ©¥ Ï¢ãÍ≤†Ïñ¥Ïöî!"
                else -> "Ïò§ÎäòÏùÄ Íµ¨Î¶ÑÏù¥ ÎßéÎÑ§Ïöî ‚òÅÔ∏è\nÌòπÏãú Î™®Î•¥Îãà Ïö∞ÏÇ∞ÏùÑ Ï±ôÍ≤®Î≥¥ÏÑ∏Ïöî!"
            }
        } else {
            when {
                rainProbability < 10 -> "Ïò§ÎäòÏùÄ ÎßëÏùÄ ÎÇ†Ïî®ÏòàÏöî! ‚òÄÔ∏è\nÏö∞ÏÇ∞ ÏóÜÏù¥ÎèÑ Í¥úÏ∞ÆÏùÑ Í≤É Í∞ôÏïÑÏöî"
                rainProbability < 30 -> "Ïò§ÎäòÏùÄ Í¥úÏ∞ÆÏùÄ ÎÇ†Ïî®ÎÑ§Ïöî üòä\nÏö∞ÏÇ∞ÏùÄ ÌïÑÏöî ÏóÜÏùÑ Í≤É Í∞ôÏïÑÏöî"
                else -> "Ïò§Îäò ÎÇ†Ïî®Îäî Î¨¥ÎÇúÌï¥Ïöî üå§Ô∏è\nÏö∞ÏÇ∞ÏùÄ ÏÑ†ÌÉùÏÇ¨Ìï≠Ïù¥ÏóêÏöî!"
            }
        }
    }
    
    private fun checkAllLoaded() {
        val results = _uiState.value.apiResults
        // 8Í∞ú API Î™®Îëê Ï≤¥ÌÅ¨ (Config 2Í∞ú + ÎÇòÎ®∏ÏßÄ 6Í∞ú)
        if (results.configResult.isNotEmpty() &&
            results.configResponseResult.isNotEmpty() &&
            results.appInfoResult.isNotEmpty() &&
            results.menuResult.isNotEmpty() && 
            results.toolbarResult.isNotEmpty() && 
            results.fcmTopicResult.isNotEmpty() && 
            results.styleResult.isNotEmpty() &&
            results.buttonResult.isNotEmpty()) {
            _uiState.value = _uiState.value.copy(isLoading = false)
        }
    }
    
    private fun initializeFcm() {
        fcmManager.getToken { token ->
            if (token != null) {
                println("FCM Token: $token")
                sendTokenToServer(token)
            }
        }
    }
    
    private fun sendTokenToServer(token: String) {
        viewModelScope.launch {
            try {
                println("Sending FCM token to server for app: $APP_ID, token: $token")
            } catch (e: Exception) {
                println("Failed to send token to server: ${e.message}")
            }
        }
    }
    
    fun refreshConfig() {
        loadAllData()
    }
    
    data class UiState(
        val isLoading: Boolean = false,
        val config: AppConfig? = null,
        val configResponse: ConfigResponseDto? = null,
        val appInfo: AppInfoDto? = null,
        val menus: List<Menu> = emptyList(),
        val toolbars: List<Toolbar> = emptyList(),
        val fcmTopics: List<FcmTopic> = emptyList(),
        val styles: List<Style> = emptyList(),
        val buttons: List<Button> = emptyList(),
        val weatherInfo: WeatherInfo? = null,
        val rainProbability: Double = 0.0,
        val isRainyDay: Boolean = false,
        val weatherMessage: String = "",
        val apiResults: ApiResults = ApiResults(),
        val error: String? = null
    )
    
    data class ApiResults(
        val configResult: String = "",
        val configResponseResult: String = "",
        val appInfoResult: String = "",
        val menuResult: String = "",
        val toolbarResult: String = "",
        val fcmTopicResult: String = "",
        val styleResult: String = "",
        val buttonResult: String = ""
    )
} 